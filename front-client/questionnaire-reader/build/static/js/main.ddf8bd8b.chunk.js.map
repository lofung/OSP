{"version":3,"sources":["App.js","index.js"],"names":["App","useState","title","setTitle","token","setToken","questionList","setQuestionList","getTodayDate","today","Date","dd","String","getDate","padStart","mm","getMonth","getFullYear","submitQ","a","answerList","forEach","item","idx","push","question","answer","name","document","getElementById","value","date","answers","fetch","substring","method","headers","body","JSON","stringify","alert","window","location","href","console","error","generateOptions","options","index","split","filter","map","style","type","onChange","e","checkedboxes","querySelectorAll","values","checkbox","tempAnswerList","changeCheckboxAnswer","htmlFor","recordAnswer","target","answerSwitch","obj","id","limits","lowerLimit","parseInt","upperLimit","resultArray","k","defaultValue","disabled","score","getCurrentAddress","address","addressArray","length","response","json","JSONData","questionData","data","content_json","questionnaire_name","useEffect","className","onClick","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ddf8bd8b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css';\n\nfunction App() {\n  const [title, setTitle] = useState(\"Ordinary Questionnaire (Cannot fetch db - demo)\")\n  const [token, setToken] = useState(\"vkkU2MmK\")\n  const [questionList, setQuestionList] = useState(\n    [{\"question\":\"day?\",\"type\":\"textbox\",\"options\":\"\", \"required\": false, \"answer\": \"\"},\n    {\"question\":\"drinking?\",\"type\":\"mc\",\"options\":\"yes; no; i dunno;\", \"required\": false, \"answer\": \"\"},\n    {\"question\":\"like parents?\",\"type\":\"likert\",\"options\":\"1-10\", \"required\": false, \"answer\": \"\"},\n    {\"question\":\"like hk?\",\"type\":\"likert\",\"options\":\"agree-disagree-5\", \"required\": false, \"answer\": \"\"}]\n    );\n\n  function getTodayDate(){\n    //https://stackoverflow.com/questions/1531093/how-do-i-get-the-current-date-in-javascript\n    let today = new Date();\n    let dd = String(today.getDate()).padStart(2, '0');\n    let mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n    let yyyy = today.getFullYear();\n\n    return yyyy + '/' + mm + '/' + dd;\n  }\n\n  const submitQ = async () => {\n    let answerList = []\n    questionList.forEach((item, idx) => {\n      answerList.push({\"question\": item.question, \"answer\": item.answer})\n    })\n    //only get q and a to minimize db load\n    const answer = {\n      name: document.getElementById('name').value,\n      date: getTodayDate(),\n      answers: answerList\n    }\n    try {\n      //'token', 'questionnaire_name', 'active', 'create_date', 'modi_date', 'content_JSON', questionList, moneySignList\n      const response = await fetch('/api/v1/postanswers/' + token.substring(0, 8), {\n          method: \"POST\",\n          headers: {\"Content-Type\": \"application/json\"},\n          body: JSON.stringify(answer),\n          \n      });\n      alert(\"input success, thank you for answering!!\")\n      window.location.href = \"/\" \n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  const changeCheckboxAnswer = (index, question) => {\n    //https://www.javascripttutorial.net/javascript-dom/javascript-checkbox/\n    const checkedboxes = document.querySelectorAll(`input[name=q${index}]:checked`);\n    //querySelectorAll cannot searc special characters\n    //console.log(checkedboxes)\n    let values = [];\n    checkedboxes.forEach((checkbox) => {\n        values.push(checkbox.value);\n    });\n    let tempAnswerList = [...questionList]\n    tempAnswerList[index][\"answer\"] = values\n    setQuestionList(tempAnswerList)\n  }\n\n  const generateOptions = (options, index, question) => {\n    //return options.split(';').map(answer => \"hello world\")\n    //console.log(options.split(';'))\n    return (options.split(\";\").filter(answer => answer!==\"\").map((answer, idx) => \n        <div key={answer+\"-\"+idx} style={{\"margin\": \"5px\"}}>\n          <input type=\"checkbox\" value={answer} name={\"q\"+index} onChange={(e) => changeCheckboxAnswer(index)}/>\n          <label htmlFor={answer}>{answer}</label>\n        </div>\n    ))\n  }\n\n  const recordAnswer = (e, idx) => {\n    let tempAnswerList = [...questionList]\n    tempAnswerList[idx][\"answer\"] = e.target.value\n    setQuestionList(tempAnswerList)\n  }\n\n  const answerSwitch = (type, options, index, question) => {\n    // https://stackoverflow.com/questions/46592833/how-to-use-switch-statement-inside-a-react-component/60365434\n    let obj = \"\"\n    switch(type){\n      case \"textbox\":\n        obj = <input type=\"text\" id={\"q\"+index} onChange={(e) => recordAnswer(e, index)}/>\n        break;\n      case \"mc\":\n        //https://www.w3schools.com/tags/att_select_multiple.asp\n        obj = <div id={\"q\"+index}>\n          {generateOptions(options, index, question)}\n        </div>\n        break;\n      case \"likert\":\n        if (options === \"1-10\"){\n          let limits = options.split(\"-\")\n          let lowerLimit = parseInt(limits[0])\n          let upperLimit = parseInt(limits[1])\n          let resultArray = []\n          for (let k = lowerLimit; k<upperLimit+1; k++) { resultArray.push(k) }\n          obj = <select name={\"q\"+index} id={\"q\"+index} defaultValue=\"default\" onChange={(e) => recordAnswer(e, index)}>\n            <option value=\"default\" disabled>Select</option>\n            {resultArray.map(score => <option key={score+\"score\"} value={score}>{score}</option>)}\n          </select>\n        }\n        if (options === \"agree-disagree-5\"){\n          let resultArray = [\"Strongly Agree\", \"Agree\", \"Neutral\", \"Disagree\", \"Strongly Disagree\"]\n          obj = <select name={\"q\"+index} id={\"q\"+index}  defaultValue=\"default\" onChange={(e) => recordAnswer(e, index)}>\n            <option value=\"default\" disabled>Select</option>\n            {resultArray.map(score => <option key={score+\"agree\"}value={score}>{score}</option>)}\n          </select>\n        }\n        break;\n      default:\n        obj =\"caught in default, contact developer\"\n        break;\n    }\n    return obj\n  }\n\n  const getCurrentAddress = async () => {\n    let address = window.location.href //address that is typed into the client browser\n    //console.log(window.location.href)\n    let addressArray = address.split(\"/\")\n    let token = addressArray[addressArray.length-1] //the token of the q we want to fetch from server\n    //alert(token)\n    setToken(token)\n    try {\n      const response = await fetch('/api/v1/questionnaire-live/' + token)\n      //console.log(response)\n      //must need this line to get the result of JSON, not some silly stuff\n      const JSONData = await response.json();\n      //console.log(JSONData)\n      const questionData = JSONData.data.content_json\n      //console.log(questionData)\n      setTitle(JSONData.data.questionnaire_name)\n      setToken(JSONData.data.token + \" - load success\")\n      setQuestionList(questionData)\n    } catch (err) {\n      console.error(err)\n    }\n\n  }\n\n  useEffect(() =>{\n    getCurrentAddress()\n  }, []);\n\n  return (\n    <div className=\"container\" style={{\"margin\": \"15px\"}}>\n      <h1>{title}</h1>\n      Token: <input type=\"text\" value={token} disabled />\n      <div className=\"questionnaire-container\" style={{\"margin\": \"15px\", \"border\":\"1px solid\"}}>\n        <br />\n        Name: <input type=\"text\" id=\"name\" />\n        {/* generate questionnaire here */}\n        {questionList.map((data, idx) => \n          <div key={idx+'box'} className={'question-'+idx+'-box'} style={{\"margin\": \"10px\"}}>\n            <div>{idx+1}. {data.question}</div>\n            {/* generate answer in swtich */}\n            {answerSwitch(data.type, data.options, idx, data.question)}\n          </div>\n        )}\n      </div>\n\n      <button onClick={() => submitQ()}>Submit</button>\n      <br/>{JSON.stringify(questionList)}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}