{"version":3,"sources":["App.js","index.js"],"names":["App","useState","summaryList","setSummaryList","token","setToken","questionnaireName","setQuestionnaireName","getCurrentAddress","a","address","window","location","href","addressArray","split","length","fetch","response","json","JSONData","data","questionnaire_name","console","error","useEffect","log","className","style","map","item","idx","question","entry","index","name","create_date","answer","Array","isArray","ans","k","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAgFeA,MA7Ef,WAAgB,IAAD,EACyBC,mBAAS,CAAC,CAAC,KAAO,SAAS,YAAc,aAAa,OAAS,CAAC,CAAC,SAAW,WAAW,OAAS,OAAO,CAAC,SAAW,MAAM,OAAS,CAAC,YAAY,aAAa,CAAC,SAAW,SAAS,OAAS,SAAS,CAAC,SAAW,cAAc,OAAS,OAAO,CAAC,KAAO,OAAO,YAAc,aAAa,OAAS,CAAC,CAAC,SAAW,WAAW,OAAS,SAAS,CAAC,SAAW,MAAM,OAAS,CAAC,QAAQ,CAAC,SAAW,SAAS,OAAS,YAAY,CAAC,SAAW,cAAc,OAAS,OAAO,CAAC,KAAO,QAAQ,YAAc,aAAa,OAAS,CAAC,CAAC,SAAW,WAAW,OAAS,MAAM,CAAC,SAAW,MAAM,OAAS,CAAC,aAAa,CAAC,SAAW,SAAS,OAAS,qBAAqB,CAAC,SAAW,cAAc,OAAS,SADrrB,mBACNC,EADM,KACOC,EADP,OAEaF,mBAAS,YAFtB,mBAENG,EAFM,KAECC,EAFD,OAGqCJ,mBAAS,UAH9C,mBAGNK,EAHM,KAGaC,EAHb,KAKPC,EAAiB,uCAAG,wCAAAC,EAAA,6DAEpBC,EAAUC,OAAOC,SAASC,KAE1BC,EAAeJ,EAAQK,MAAM,KAC7BX,EAAQU,EAAaA,EAAaE,OAAO,GAE7CX,EAASD,GAPe,kBAUCa,MAAM,8BAAgCb,GAVvC,cAUhBc,EAVgB,iBAaCA,EAASC,OAbV,QAahBC,EAbgB,OAetBb,EAAqBa,EAASC,KAAKC,oBACnCjB,EAASe,EAASC,KAAKjB,OAhBD,kDAkBtBmB,QAAQC,MAAR,MAlBsB,mCAsBCP,MAAM,uBAAyBb,GAtBhC,eAsBhBc,EAtBgB,iBAyBCA,EAASC,OAzBV,QAyBhBC,EAzBgB,OA2BtBjB,EAAeiB,EAASC,MA3BF,mDA6BtBE,QAAQC,MAAR,MA7BsB,kEAAH,qDAuCvB,OALAC,qBAAU,WACRjB,IACAe,QAAQG,IAAIxB,KACX,IAGD,sBAAKyB,UAAU,YAAYC,MAAO,CAAC,OAAS,QAA5C,UACE,6CAAgBtB,EAAhB,KAAqCF,EAArC,OACA,uBACA,mBAAGS,KAAK,oBAAR,iCACA,uBACA,uBACA,wBAAOe,MAAO,CAAC,OAAU,mBAAzB,UACE,gCACE,+BACE,sCACA,sCACC1B,EAAY,GAAZ,OAAyB2B,KAAI,SAACC,EAAMC,GAAP,OAC5B,6BAA6BD,EAAKE,UAAzBD,EAAID,EAAKE,kBAIxB,gCACG9B,EAAY2B,KAAI,SAACI,EAAOC,GAAR,OACf,+BACE,6BAAKD,EAAME,OACX,6BAAKF,EAAMG,cACVH,EAAMI,OAAOR,KAAI,SAACC,EAAMC,GAAP,OAChB,8BAAmE,IAA7BO,MAAMC,QAAQT,EAAKO,QAAeP,EAAKO,OAAOR,KAAI,SAACW,EAAKC,GAAN,OAAW,8BAAkBD,GAAR,IAAIC,MAAgBX,EAAKO,QAA7HJ,EAAME,KAAKJ,EAAID,EAAKO,aAJxBH,EAAMD,EAAME,kBC9DjCO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.fec19d58.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css';\n\nfunction App() {\n  const [summaryList, setSummaryList] = useState([{\"name\":\"kelvin\",\"create_date\":\"2021/01/26\",\"answer\":[{\"question\":\"textbox?\",\"answer\":\"yes\"},{\"question\":\"mc?\",\"answer\":[\" very fat\",\" not fat\"]},{\"question\":\"agree?\",\"answer\":\"Agree\"},{\"question\":\"1-10 score?\",\"answer\":\"2\"}]},{\"name\":\"john\",\"create_date\":\"2021/01/26\",\"answer\":[{\"question\":\"textbox?\",\"answer\":\"hello\"},{\"question\":\"mc?\",\"answer\":[\"fat\"]},{\"question\":\"agree?\",\"answer\":\"Disagree\"},{\"question\":\"1-10 score?\",\"answer\":\"3\"}]},{\"name\":\"sanny\",\"create_date\":\"2021/01/26\",\"answer\":[{\"question\":\"textbox?\",\"answer\":\"gg\"},{\"question\":\"mc?\",\"answer\":[\" not fat\"]},{\"question\":\"agree?\",\"answer\":\"Strongly Disagree\"},{\"question\":\"1-10 score?\",\"answer\":\"4\"}]}]);\n  const [token, setToken] = useState(\"oLjLAXl1\")\n  const [questionnaireName, setQuestionnaireName] = useState(\"Q-name\")\n\n  const getCurrentAddress = async () => {\n    //get the current address and then break down into token, and then load the data\n    let address = window.location.href //address that is typed into the client browser\n    //console.log(window.location.href)\n    let addressArray = address.split(\"/\")\n    let token = addressArray[addressArray.length-1] //the token of the q we want to fetch from server\n    //alert(token)\n    setToken(token)\n    try {\n      //did not attached questionnaire name into the sub-database and hence need to load from main\n      const response = await fetch('/api/v1/questionnaire-live/' + token)\n      //console.log(response)\n      //must need this line to get the result of JSON, not some silly stuff\n      const JSONData = await response.json();\n      //console.log(JSONData)\n      setQuestionnaireName(JSONData.data.questionnaire_name)\n      setToken(JSONData.data.token)\n    } catch (err) {\n      console.error(err)\n    }\n    try {\n      //load answers from sub-database\n      const response = await fetch('/api/v1/viewanswers/' + token)\n      //console.log(response)\n      //must need this line to get the result of JSON, not some silly stuff\n      const JSONData = await response.json();\n      //console.log(JSONData)\n      setSummaryList(JSONData.data)\n    } catch (err) {\n      console.error(err)\n    }\n\n  }\n\n  useEffect(() => {\n    getCurrentAddress();\n    console.log(summaryList)\n  }, [])\n\n  return (\n    <div className=\"container\" style={{\"margin\":\"15px\"}}>\n      <h1>Results of {questionnaireName} ({token})</h1>\n      <br />\n      <a href=\"/bd/admin-config/\">Return to main page</a>\n      <br />\n      <br />\n      <table style={{\"border\": \"1px solid black\"}}>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Date</th>\n            {summaryList[0][\"answer\"].map((item, idx)=> \n              <th key={idx+item.question}>{item.question}</th>\n            )}\n          </tr>\n        </thead>\n        <tbody>\n          {summaryList.map((entry, index) => \n            <tr key={index+entry.name}>\n              <td>{entry.name}</td>\n              <td>{entry.create_date}</td>\n              {entry.answer.map((item, idx) => \n                <td key={entry.name+idx+item.answer}>{Array.isArray(item.answer)===true?item.answer.map((ans, k) =><div key={\"a\"+k}>{ans}</div>):item.answer}</td>\n              )}\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}