{"version":3,"sources":["App.js","index.js"],"names":["App","useState","questionList","setQuestionList","existingTokenList","setExistingTokenList","getTodayDate","today","Date","dd","String","getDate","padStart","mm","getMonth","getFullYear","a","newArray","forEach","data","type","options","token","document","getElementById","value","questionnaire_name","qList","moneySignList","item","idx","concat","question","fetch","method","headers","body","JSON","stringify","response","alert","window","location","href","url","console","error","changeItem","e","target","nextSibling","disabled","placeholder","previousSibling","drawBubbles","previewBox","innerHTML","tag","tagEl","createElement","classList","add","innerText","appendChild","split","filter","trim","map","reloadId","result","length","characters","charactersLength","i","charAt","Math","floor","random","makeid","tokenObj","getCurrentTokens","json","JSONData","tokenRow","index","option","getCurrentQuestions","questionData","content_json","finalQuestionData","log","querySelectorAll","choice","enableDisableReloadTokenButton","useEffect","className","style","id","onChange","name","onClick","list","splice","addRow","submit","ReactDOM","render","StrictMode"],"mappings":"mPAyVeA,MAtVf,WAAgB,IAAD,EAC2BC,mBAAS,CAAC,CAAC,SAAY,GAAI,KAAQ,UAAW,QAAW,MADpF,mBACNC,EADM,KACQC,EADR,OAEqCF,mBAAS,IAF9C,mBAENG,EAFM,KAEaC,EAFb,KAgBb,SAASC,IAIP,IAAIC,EAAQ,IAAIC,KACZC,EAAKC,OAAOH,EAAMI,WAAWC,SAAS,EAAG,KACzCC,EAAKH,OAAOH,EAAMO,WAAa,GAAGF,SAAS,EAAG,KAGlD,OAFWL,EAAMQ,cAEH,IAAMF,EAAK,IAAMJ,EAzBpB,4CA4Bb,wCAAAO,EAAA,0DAEMC,EAFN,YAEqBf,IAEVgB,SAAQ,SAAAC,GAEC,OAAbA,EAAKC,MAA6B,WAAbD,EAAKC,OAAoBD,EAAKE,QAAU,OAElElB,EAAgBc,GAGZK,EAAQC,SAASC,eAAe,SAASC,MACzCC,EAAqBH,SAASC,eAAe,QAAQC,MAKrDE,EAAQ,GACRC,EAAgB,GACpB1B,EAAagB,SAAQ,SAACW,EAAMC,GAExBH,EADgB,YAAdE,EAAKT,KACCO,EAAMI,OAAOF,EAAKG,SAAU,kBAE5BL,EAAMI,OAAOF,EAAKG,SAAU,iBAEtCJ,EAAgBA,EAAcG,OAAd,WAAyBD,EAAI,EAA7B,SAKkC,WAAhDP,SAASC,eAAe,cAAcC,MA9B5C,2CAkC6BQ,MAAM,0BAA2B,CACpDC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CAAE,MAAQhB,EAAO,mBAAsBI,EAAoB,QAAU,EAAM,YAAepB,IAAgB,UAAaA,IAAgB,aAAgBW,EAAU,aAAgBU,EAAO,cAAiBC,MArCxO,QAkCYW,EAlCZ,OAwCMC,MAAM,2CACNC,OAAOC,SAASC,KAAOJ,EAASK,IAzCtC,kDA2CMC,QAAQC,MAAR,MA3CN,2DAiD6Bb,MAAM,sBAAwBX,EAAO,CACxDY,OAAQ,MACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CAAE,MAAQhB,EAAO,mBAAsBI,EAAoB,QAAU,EAAM,YAAepB,IAAgB,UAAaA,IAAgB,aAAgBW,EAAU,aAAgBU,EAAO,cAAiBC,MApDxO,QAiDYW,EAjDZ,OAuDMC,MAAM,yCACNC,OAAOC,SAASC,KAAOJ,EAASK,IAxDtC,mDA0DMC,QAAQC,MAAR,MA1DN,mEA5Ba,sBA6Gb,SAASC,EAAWC,EAAGlB,EAAKD,GAE1B,IAAIZ,EAAQ,YAAOf,GACnBe,EAASa,GAAKD,GAAQmB,EAAEC,OAAOxB,MAC/BtB,EAAgBc,GAGL,SAAPY,GAAoC,OAAnBmB,EAAEC,OAAOxB,OAG5BuB,EAAEC,OAAOC,YAAYC,UAAW,EAChCH,EAAEC,OAAOC,YAAYE,YAAY,8BACjB,SAAPvB,GAAoC,WAAnBmB,EAAEC,OAAOxB,OAEnCuB,EAAEC,OAAOC,YAAYC,UAAW,EAChCH,EAAEC,OAAOC,YAAYE,YAAY,wBACjB,SAAPvB,IAETmB,EAAEC,OAAOC,YAAYC,UAAW,EAChCH,EAAEC,OAAOC,YAAYE,YAAY,GACjCjD,EAAgBc,IAKP,YAAPY,GAAsD,OAAjCmB,EAAEC,OAAOI,gBAAgB5B,OAA+C,WAAjCuB,EAAEC,OAAOI,gBAAgB5B,MAGvE,SAAPI,GAAmC,YAAjBmB,EAAEC,OAAOxB,MAEpC6B,EAAYxB,EAAK,GAAI,WACL,SAAPD,GAAmC,OAAjBmB,EAAEC,OAAOxB,OAA+B,WAAjBuB,EAAEC,OAAOxB,OAE3D6B,EAAYxB,EAAKkB,EAAEC,OAAOC,YAAYzB,MAAOuB,EAAEC,OAAOxB,OANtD6B,EAAYxB,EAAKkB,EAAEC,OAAOxB,MAAOuB,EAAEC,OAAOI,gBAAgB5B,OAa9D,SAAS6B,EAAYxB,EAAKL,EAAOL,GAC/B,IAAImC,EAAahC,SAASC,eAAe,SAASM,GAGlD,GAFAyB,EAAWC,UAAX,GAEY,SAAR/B,EAAe,CAKJ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAItDP,SAAQ,SAAAuC,GACX,IAAMC,EAAQnC,SAASoC,cAAc,QACrCD,EAAME,UAAUC,IAAI,OACpBH,EAAME,UAAUC,IAAI,cACpBH,EAAMI,UAAYL,EAClBF,EAAWQ,YAAYL,WAGpB,GAAY,qBAARjC,EAA4B,CAExB,CAAC,oBAAqB,WAAY,UAAW,QAAS,kBAG9DP,SAAQ,SAAAuC,GACX,IAAMC,EAAQnC,SAASoC,cAAc,QACrCD,EAAME,UAAUC,IAAI,OACpBH,EAAME,UAAUC,IAAI,cACpBH,EAAMI,UAAYL,EAClBF,EAAWQ,YAAYL,UAGpB,CAGQjC,EAAMuC,MAAM,KACtBC,QAAO,SAAAR,GAAG,MAAiB,KAAbA,EAAIS,UAClBC,KAAI,SAAAV,GAAG,OAAEA,EAAIS,UAGXhD,SAAQ,SAAAuC,GACX,IAAMC,EAAQnC,SAASoC,cAAc,QACrCD,EAAME,UAAUC,IAAI,OACpBH,EAAMI,UAAYL,EAClBF,EAAWQ,YAAYL,OAM7B,SAASU,IAEP7C,SAASC,eAAe,eAAe2B,UAAW,EAClD,IAAIkB,EAvMN,SAAgBC,GAKd,IAHA,IAAID,EAAmB,GACnBE,EAAmB,iEACnBC,EAAmBD,EAAWD,OACxBG,EAAI,EAAGA,EAAIH,EAAQG,IAC1BJ,GAAUE,EAAWG,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,IAE1D,OAAOH,EA+LMS,CAAO,GACpBvD,SAASC,eAAe,SAASC,MAAQ4C,EACzCjE,EAAkBc,SAAQ,SAAA6D,GACpBA,EAASzD,QAAU+C,EACrBD,IAGA7C,SAASC,eAAe,SAASC,MAAQ4C,KAK/C,IAAMW,EAAgB,uCAAG,8BAAAhE,EAAA,+EAGIiB,MAAM,0BAHV,cAGbM,EAHa,gBAMIA,EAAS0C,OANb,OAMbC,EANa,OASnB7E,EAAqB6E,EAAS/D,MAC9B+D,EAAS/D,KAAKD,SAAQ,SAACiE,EAAUC,GAC/B,IAAIC,EAAS9D,SAASoC,cAAc,UACpC0B,EAAO5D,MAAQ0D,EAAS7D,MACxB+D,EAAO7B,UAAY2B,EAAS7D,MAAQ,MAAQ6D,EAASzD,mBACrDH,SAASC,eAAe,cAAcqC,IAAIwB,MAdzB,kDAiBnBxC,QAAQC,MAAR,MAjBmB,0DAAH,qDAsBhBwC,EAAmB,uCAAG,WAAOtC,GAAP,qBAAAhC,EAAA,6DAG1BoD,IAH0B,kBAKDnC,MAAM,8BAAgCe,EAAEC,OAAOxB,OAL9C,cAKlBc,EALkB,gBAQDA,EAAS0C,OARR,OAQlBC,EARkB,OAUpBK,EAAeL,EAAS/D,KAAKqE,aAEjCjE,SAASC,eAAe,QAAQC,MAAQyD,EAAS/D,KAAKO,mBACtDH,SAASC,eAAe,SAASC,MAAQyD,EAAS/D,KAAKG,MACnDmE,EAAoBF,EAExB1C,QAAQ6C,IAAID,GACZ5C,QAAQ6C,WAAWD,GACnBtF,EAAgBsF,GAIIlE,SAASoE,iBAAiB,YAChCzE,SAAQ,SAAA0E,GACC,WAAjBA,EAAOnE,OAAuC,OAAjBmE,EAAOnE,QACtCmE,EAAO1C,YAAYC,UAAW,MAGlC0C,IA5BwB,kDA8BxBhD,QAAQC,MAAR,MA9BwB,0DAAH,sDAmCnB+C,EAAiC,WAEe,WAAhDtE,SAASC,eAAe,cAAcC,OAGxC2C,IACA7C,SAASC,eAAe,eAAe2B,UAAW,GAGlD5B,SAASC,eAAe,eAAe2B,UAAW,GAStD,OALA2C,qBAAU,WACR1B,IACAY,MACC,IAGD,sBAAKe,UAAU,YAAYC,MAAO,CAAC,OAAU,QAA7C,UACE,uDACA,gEACA,wBAAQD,UAAU,iBAAiBE,GAAG,aAAaD,MAAO,CAAC,MAAS,SAAUE,SAAU,SAAClD,GAAD,OAAOsC,EAAoBtC,IAAnH,SACE,wBAAQvB,MAAM,SAAd,wCAEF,uBACA,uBACA,sDACA,uBAAOL,KAAK,OAAO6E,GAAG,OAAOE,KAAK,SAClC,yDACA,uBAAO/E,KAAK,OAAO6E,GAAG,QAAQE,KAAK,QAAQhD,UAAQ,IAXrD,IAWwD,wBAAQ8C,GAAG,cAAcG,QAAS,kBAAMhC,KAAxC,oBACtD,uBACA,sBAAK4B,MAAO,CAAC,OAAU,OAAQ,OAAS,aAAxC,UACE,sBAAKA,MAAO,CAAC,OAAU,QAAvB,UACC9F,EAAaiE,KAAI,SAAChD,EAAMW,GAAP,OAClB,gCACE,sBAAKkE,MAAO,CAAC,OAAU,QAAvB,UACE,uBAAO5E,KAAK,OAAO+E,KAAK,WAAW1E,MAAON,EAAI,SAAc+E,SAAU,SAAClD,GAAD,OAAOD,EAAWC,EAAGlB,EAAK,eAChG,yBAAQqE,KAAK,OAAOJ,UAAU,UAAUtE,MAAON,EAAI,KAAU+E,SAAU,SAAClD,GAAD,OAAOD,EAAWC,EAAGlB,EAAK,SAAjG,UACE,wBAAQL,MAAM,UAAd,qBACA,wBAAQA,MAAM,KAAd,6BACA,wBAAQA,MAAM,SAAd,uBAEF,uBAAO4E,KAAM,sBAAsBvE,EAAKV,KAAK,OAAO+E,KAAK,UAAU1E,MAAON,EAAI,QAAa+E,SAAU,SAAClD,GAAD,OAAOD,EAAWC,EAAGlB,EAAK,YAAYqB,UAAQ,IACnJ,2BAAU8C,GAAI,sBAAsBnE,EAApC,UACE,wBAAQL,MAAM,OAAd,yBACA,wBAAQA,MAAM,mBAAd,iCAEF,wBAAQ2E,QAAS,SAACpD,GAAD,OAjO3B,SAAgBA,EAAGoC,GAIjB,IAAInE,EAAQ,YAAOf,GACnBe,EAASqF,OAAOlB,EAAO,EAAG,CAAC,SAAY,GAAI,KAAQ,UAAW,QAAW,KAIzEjF,EAAgBc,GAwNcsF,CAAOvD,EAAGlB,IAAhC,kBAEF,qBAAKmE,GAAI,SAASnE,MAfVA,MAqBV,wBAAQsE,QAAS,WA5OrBjG,EAAgB,GAAD,mBAAKD,GAAL,CAAmB,CAAC,SAAY,GAAI,KAAQ,UAAW,QAAW,QA4O7E,kBAEF,uBACA,0BAGA,wBAAQkG,QAAS,kBA/UR,0CA+UYI,IAArB,oBACCnE,KAAKC,UAAUpC,OC9UtBuG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpF,SAASC,eAAe,W","file":"static/js/main.d7eabd85.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css';\n\nfunction App() {\n  const [questionList, setQuestionList] = useState([{\"question\": \"\", \"type\": \"textbox\", \"options\": \"\"}]);\n  const [existingTokenList, setExistingTokenList] = useState([]);\n\n  //https://stackoverflow.com/questions/1349404/generate-random-string-characters-in-javascript\n  function makeid(length) {\n    //generate ID of 8 length\n    var result           = '';\n    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for ( var i = 0; i < length; i++ ) {\n       result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result\n  }\n\n  function getTodayDate(){\n    //get the date of today.\n    //should include time also next time.\n    //https://stackoverflow.com/questions/1531093/how-do-i-get-the-current-date-in-javascript\n    let today = new Date();\n    let dd = String(today.getDate()).padStart(2, '0');\n    let mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n    let yyyy = today.getFullYear();\n\n    return yyyy + '/' + mm + '/' + dd;\n  }\n\n  async function submit(){\n    //handle the submit button push\n    let newArray = [...questionList] //copy from state such that it does not have the pointer pointing to same memory\n\n    newArray.forEach(data => {\n      //if it is anything outside mc or likert, the options should be empty\n      if(data.type !==\"mc\" && data.type !==\"likert\") { data.options = \"\"}\n    })\n    setQuestionList(newArray) \n\n    //asign values to appropiate boxes\n    let token = document.getElementById('token').value\n    let questionnaire_name = document.getElementById('name').value\n\n    //these variables was build such that it can dynamically create database for answers,\n    //and have every answer in a column such that the SQL wont lose its ability to analyse\n    //HOWEVER, there is not enough time in this project to dig deep in this feature\n    let qList = \"\" //variable clash , questionList and qlist\n    let moneySignList = \"\"\n    questionList.forEach((item, idx) => {\n      if (item.type === \"textbox\"){\n        qList = qList.concat(item.question, \" varchar(100) \")\n      } else {\n        qList = qList.concat(item.question, \" varchar(10) \")\n      }\n      moneySignList = moneySignList.concat(`$${idx+1} `)\n    })\n\n    //feature to delete excessive empty columns are not done because no time\n\n    if (document.getElementById('selectMode').value === \"create\") {\n      try {\n        //if it is not editing an existing questionnaire, then create\n        //'token', 'questionnaire_name', 'active', 'create_date', 'modi_date', 'content_JSON', questionList, moneySignList\n        const response = await fetch('/api/v1/buildnewscheme/', {\n            method: \"POST\",\n            headers: {\"Content-Type\": \"application/json\"},\n            body: JSON.stringify({ \"token\":token, \"questionnaire_name\": questionnaire_name, \"active\": true, \"create_date\": getTodayDate(), \"modi_date\": getTodayDate(), \"content_json\": newArray, \"questionList\": qList, \"moneySignList\": moneySignList }),\n            \n        });\n        alert('Creation successful! Redirect to review')\n        window.location.href = response.url //redirect to preview\n      } catch (err) {\n        console.error(err);\n      }\n    } else {\n      try {\n        //update if selected existing questionnaire\n        //'token', 'questionnaire_name', 'active', 'create_date', 'modi_date', 'content_JSON', questionList, moneySignList\n        const response = await fetch('/api/v1/editscheme/' + token, {\n            method: \"PUT\",\n            headers: {\"Content-Type\": \"application/json\"},\n            body: JSON.stringify({ \"token\":token, \"questionnaire_name\": questionnaire_name, \"active\": true, \"create_date\": getTodayDate(), \"modi_date\": getTodayDate(), \"content_json\": newArray, \"questionList\": qList, \"moneySignList\": moneySignList }),\n            \n        });\n        alert('Update successful! Redirect to review')\n        window.location.href = response.url \n      } catch (err) {\n        console.error(err);\n      }\n    }\n  }\n\n  function addLastRow() {\n    //add law row to the questionnaire\n    setQuestionList([...questionList, {\"question\": \"\", \"type\": \"textbox\", \"options\": \"\"}])\n  }\n\n  function addRow(e, index){\n    //add row in the middle of the questionnaire\n    //console.log(index)\n    //console.log(questionList)\n    let newArray = [...questionList]\n    newArray.splice(index, 0, {\"question\": \"\", \"type\": \"textbox\", \"options\": \"\"})\n    //if you assign a array.slice to a variable you only get what is cut out.\n    //doing splice itself affect on the current array variable\n    //console.log(newArray)\n    setQuestionList(newArray)\n    //console.log(questionList)\n  }\n\n  function changeItem(e, idx, item){\n    //turn off and on the option box if the type of q is not textbox\n    let newArray = [...questionList]\n    newArray[idx][item] = e.target.value\n    setQuestionList(newArray)\n\n    //if select is type and mc then next text box allow typing\n    if (item===\"type\" && e.target.value === \"mc\"){\n      //nextsibling is the next tag that is not a child\n      //this is mc\n      e.target.nextSibling.disabled = false\n      e.target.nextSibling.placeholder=\"Seperate MC options with ;\"\n    } else if (item===\"type\" && e.target.value === \"likert\"){\n      //this is likert\n      e.target.nextSibling.disabled = false\n      e.target.nextSibling.placeholder=\"Select from dropdown\"\n    } else if (item===\"type\") {\n      //this is NOT likert or mc\n      e.target.nextSibling.disabled = true\n      e.target.nextSibling.placeholder=\"\"\n      setQuestionList(newArray)\n    }\n\n    //then show or delete the preview bubbles\n    //purely frontend\n    if (item===\"options\" && (e.target.previousSibling.value===\"mc\"||e.target.previousSibling.value===\"likert\") ){\n      //if someone type in options; and the selected type is mc or likert, then\n      drawBubbles(idx, e.target.value, e.target.previousSibling.value)\n    } else if (item===\"type\" && (e.target.value===\"textbox\")) {\n      //if someone chooses textbox in  type, then delete all bubbles\n      drawBubbles(idx, \"\", \"textbox\")\n    } else if (item===\"type\" && (e.target.value===\"mc\"||e.target.value===\"likert\")){\n      //if someone chooses mc or likert in type, then check if there exists options in the next box\n      drawBubbles(idx, e.target.nextSibling.value, e.target.value)\n      //index, take the value at the next box, the type is the current value\n    }\n      // (idx, input value, TYPE  in the last box)\n  }\n\n  //show preview bubbles for likert and mc\n  function drawBubbles(idx, value, type){\n    let previewBox = document.getElementById(\"sample\"+idx)\n    previewBox.innerHTML = ``\n\n    if (value===\"1-10\"){\n      //when changing to any number, \n      //1. use regex\n      //2. apply a loop to generate the array\n\n      const tags = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]\n      \n      //then attach tags to the designated preview div\n      //https://lofung.github.io/40_13_random_choice_UI/\n      tags.forEach(tag => {\n        const tagEl = document.createElement('span')\n        tagEl.classList.add('tag')\n        tagEl.classList.add('light-blue')\n        tagEl.innerText = tag\n        previewBox.appendChild(tagEl)\n      })\n\n    } else if (value===\"agree-disagree-5\") {\n\n      const tags = [\"Strongly disagree\", \"Disagree\", \"Neutral\", \"Agree\", \"Strongly Agree\"]\n      \n      //then attach tags to the designated preview div\n      tags.forEach(tag => {\n        const tagEl = document.createElement('span')\n        tagEl.classList.add('tag')\n        tagEl.classList.add('light-blue')\n        tagEl.innerText = tag\n        previewBox.appendChild(tagEl)\n      })\n\n    } else {\n\n      //anything else, ordinary mc options\n      const tags = value.split(';')\n        .filter(tag => tag.trim()!=='')//does not add any consecutive semi-colons\n        .map(tag=>tag.trim())//delete empty spaces at the start and the end\n\n      //then attach tags to the designated preview div\n      tags.forEach(tag => {\n        const tagEl = document.createElement('span')\n        tagEl.classList.add('tag')\n        tagEl.innerText = tag\n        previewBox.appendChild(tagEl)\n      })\n\n    }\n  }\n\n  function reloadId(){\n    //reload token\n    document.getElementById(\"reloadToken\").disabled = false\n    let result = makeid(8)\n    document.getElementById('token').value = result;\n    existingTokenList.forEach(tokenObj => {\n      if (tokenObj.token === result){\n        reloadId()\n        //if in very rare chance generate same token then reload again\n      } else {\n        document.getElementById('token').value = result;\n      }\n    })\n  }\n\n  const getCurrentTokens = async () => {\n    //get the list of current tokens and names\n    try {\n        const response = await fetch('/api/v1/get-all-token/')\n        //console.log(response)\n        //must need this line to get the result of JSON, not some silly stuff\n        const JSONData = await response.json();\n        //console.log(JSONData)\n        //add those tokens to dropdown menu\n        setExistingTokenList(JSONData.data)\n        JSONData.data.forEach((tokenRow, index) => {\n          let option = document.createElement('option')\n          option.value = tokenRow.token\n          option.innerHTML = tokenRow.token + \" - \" + tokenRow.questionnaire_name\n          document.getElementById('selectMode').add(option)\n      })\n    } catch (err) {\n        console.error(err)\n    }\n\n  }\n\n  const getCurrentQuestions = async (e) => {\n    //get the current questions for that given token\n    \n    reloadId();//bandage fix when switching back from edit to \"CREATE\", that the reload token button does not come back to active.\n    try {\n      const response = await fetch('/api/v1/questionnaire-live/' + e.target.value) //get token questions\n      //console.log(response)\n      //must need this line to get the result of JSON, not some silly stuff\n      const JSONData = await response.json();\n      //console.log(JSONData)\n      let questionData = JSONData.data.content_json\n      //console.log(questionData)\n      document.getElementById('name').value = JSONData.data.questionnaire_name\n      document.getElementById('token').value = JSONData.data.token\n      let finalQuestionData = questionData\n      //directly read from prestgreSQL for JSON\n      console.log(finalQuestionData)\n      console.log(typeof finalQuestionData)\n      setQuestionList(finalQuestionData)\n\n      //turn on the textbox if value is mc or likert\n      //this part of the code does not work yet\n      let allTypeChoice = document.querySelectorAll('#typeBox')\n      allTypeChoice.forEach(choice => {\n        if (choice.value === \"likert\" || choice.value === \"mc\"){\n          choice.nextSibling.disabled = false\n        }\n      })\n      enableDisableReloadTokenButton();\n    } catch (err) {\n      console.error(err)\n    }\n\n  }\n\n  const enableDisableReloadTokenButton = () => {\n    //STILL WORKING ON IT, does not work now\n    if (document.getElementById('selectMode').value === \"create\") {\n      //disable the token reload button to avoid \n      //alert(\"is create\")\n      reloadId();\n      document.getElementById(\"reloadToken\").disabled = false\n    } else {\n      //alert(\"not create\")\n      document.getElementById(\"reloadToken\").disabled = true\n    }\n  }\n\n  useEffect(() => {\n    reloadId(); //this load part becomes cannot work, dont know why yet\n    getCurrentTokens();\n  }, [])\n\n  return (\n    <div className=\"container\" style={{\"margin\": \"25px\"}}>\n      <h1>Build a questionnaire</h1>\n      <div>Select questionnaire to edit:</div>\n      <select className=\"token-dropdown\" id=\"selectMode\" style={{\"width\": \"300px\"}} onChange={(e) => getCurrentQuestions(e)}>\n        <option value=\"create\">Create new questionnaire</option>\n      </select>\n      <br />\n      <br />\n      <div>Questionnaire Name:</div>\n      <input type=\"text\" id=\"name\" name=\"name\" />\n      <div>Generate random token:</div>\n      <input type=\"text\" id=\"token\" name=\"token\" disabled/> <button id=\"reloadToken\" onClick={() => reloadId()}>Reload</button>\n      <br />\n      <div style={{\"margin\": \"15px\", \"border\":\"1px solid\"}}>\n        <div style={{\"margin\": \"15px\"}}>\n        {questionList.map((data, idx) =>\n        <div key={idx}>\n          <div style={{\"margin\": \"15px\"}}>\n            <input type=\"text\" name=\"question\" value={data[\"question\"]} onChange={(e) => changeItem(e, idx, \"question\")}/>\n            <select name=\"type\" className=\"typeBox\" value={data[\"type\"]} onChange={(e) => changeItem(e, idx, \"type\")}>\n              <option value=\"textbox\">Textbox</option>\n              <option value=\"mc\">Multiple Choice</option>\n              <option value=\"likert\">Likert</option>\n            </select>\n            <input list={\"dropdown-in-detail-\"+idx} type=\"text\" name=\"options\" value={data[\"options\"]} onChange={(e) => changeItem(e, idx, \"options\")} disabled />\n            <datalist id={\"dropdown-in-detail-\"+idx}>  \n              <option value=\"1-10\" >likert 1-10</option>\n              <option value=\"agree-disagree-5\" >agree-disagree-5</option>\n            </datalist>\n            <button onClick={(e)=>addRow(e, idx)}>+</button>\n          </div>\n          <div id={\"sample\"+idx}></div>\n        </div>\n        )\n\n        /* end of map */}\n\n        <button onClick={()=>addLastRow()}>+</button>\n      </div>\n      <br />\n      <br />\n\n      </div>\n      <button onClick={()=>submit()}>Submit</button>\n      {JSON.stringify(questionList)}\n\n    </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}