{"version":3,"sources":["App.js","index.js"],"names":["App","useState","questionList","setQuestionList","existingTokenList","setExistingTokenList","getTodayDate","today","Date","dd","String","getDate","padStart","mm","getMonth","getFullYear","a","newArray","forEach","data","type","options","token","document","getElementById","value","questionnaire_name","qList","moneySignList","item","idx","concat","question","fetch","method","headers","body","JSON","stringify","response","alert","window","location","href","url","console","error","changeItem","e","target","nextSibling","disabled","placeholder","reloadId","result","length","characters","charactersLength","i","charAt","Math","floor","random","makeid","tokenObj","getCurrentTokens","json","JSONData","tokenRow","index","option","createElement","innerHTML","add","getCurrentQuestions","questionData","content_json","finalQuestionData","log","querySelectorAll","choice","useEffect","className","style","class","id","onChange","onSelect","name","onClick","map","list","splice","addRow","submit","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9c06b4ab.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css';\n\nfunction App() {\n  const [questionList, setQuestionList] = useState([{\"question\": \"\", \"type\": \"textbox\", \"options\": \"\"}]);\n  const [existingTokenList, setExistingTokenList] = useState([]);\n\n  //https://stackoverflow.com/questions/1349404/generate-random-string-characters-in-javascript\n  function makeid(length) {\n    //generate ID of 8 length\n    var result           = '';\n    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for ( var i = 0; i < length; i++ ) {\n       result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result\n  }\n\n  function getTodayDate(){\n    //get the date of today.\n    //should include time also next time.\n    //https://stackoverflow.com/questions/1531093/how-do-i-get-the-current-date-in-javascript\n    let today = new Date();\n    let dd = String(today.getDate()).padStart(2, '0');\n    let mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n    let yyyy = today.getFullYear();\n\n    return yyyy + '/' + mm + '/' + dd;\n  }\n\n  async function submit(){\n    //handle the submit button push\n    let newArray = [...questionList] //copy from state such that it does not have the pointer pointing to same memory\n\n    newArray.forEach(data => {\n      //if it is anything outside mc or likert, the options should be empty\n      if(data.type !==\"mc\" && data.type !==\"likert\") { data.options = \"\"}\n    })\n    setQuestionList(newArray) \n    let token = document.getElementById('token').value\n    let questionnaire_name = document.getElementById('name').value\n\n    //these variables was build such that it can dynamically create database for answers,\n    //and have every answer in a column such that the SQL wont lose its ability to analyse\n    //HOWEVER, there is not enough time in this project to dig deep in this feature\n    let qList = \"\" //variable clash , questionList and qlist\n    let moneySignList = \"\"\n    questionList.forEach((item, idx) => {\n      if (item.type === \"textbox\"){\n        qList = qList.concat(item.question, \" varchar(100) \")\n      } else {\n        qList = qList.concat(item.question, \" varchar(10) \")\n      }\n      moneySignList = moneySignList.concat(`$${idx+1} `)\n    })\n\n    //feature to delete excessive empty columns are not done because no time\n\n    if (document.getElementById('selectMode').value === \"create\") {\n      try {\n        //if it is not editing an existing questionnaire, then create\n        //'token', 'questionnaire_name', 'active', 'create_date', 'modi_date', 'content_JSON', questionList, moneySignList\n        const response = await fetch('/api/v1/buildnewscheme/', {\n            method: \"POST\",\n            headers: {\"Content-Type\": \"application/json\"},\n            body: JSON.stringify({ \"token\":token, \"questionnaire_name\": questionnaire_name, \"active\": true, \"create_date\": getTodayDate(), \"modi_date\": getTodayDate(), \"content_json\": newArray, \"questionList\": qList, \"moneySignList\": moneySignList }),\n            \n        });\n        alert('Creation successful! Redirect to review')\n        window.location.href = response.url //redirect to preview\n      } catch (err) {\n        console.error(err);\n      }\n    } else {\n      try {\n        //update if selected existing questionnaire\n        //'token', 'questionnaire_name', 'active', 'create_date', 'modi_date', 'content_JSON', questionList, moneySignList\n        const response = await fetch('/api/v1/editscheme/' + token, {\n            method: \"PUT\",\n            headers: {\"Content-Type\": \"application/json\"},\n            body: JSON.stringify({ \"token\":token, \"questionnaire_name\": questionnaire_name, \"active\": true, \"create_date\": getTodayDate(), \"modi_date\": getTodayDate(), \"content_json\": newArray, \"questionList\": qList, \"moneySignList\": moneySignList }),\n            \n        });\n        alert('Update successful! Redirect to review')\n        window.location.href = response.url \n      } catch (err) {\n        console.error(err);\n      }\n    }\n  }\n\n  function addLastRow() {\n    //add law row to the questionnaire\n    setQuestionList([...questionList, {\"question\": \"\", \"type\": \"textbox\", \"options\": \"\"}])\n  }\n\n  function addRow(e, index){\n    //add row in the middle of the questionnaire\n    //console.log(index)\n    //console.log(questionList)\n    let newArray = [...questionList]\n    newArray.splice(index, 0, {\"question\": \"\", \"type\": \"textbox\", \"options\": \"\"})\n    //if you assign a array.slice to a variable you only get what is cut out.\n    //doing splice itself affect on the current array variable\n    //console.log(newArray)\n    setQuestionList(newArray)\n    //console.log(questionList)\n  }\n\n  function changeItem(e, idx, item){\n    //turn off and on the option box if the type of q is not textbox\n    let newArray = [...questionList]\n    newArray[idx][item] = e.target.value\n    setQuestionList(newArray)\n\n    //if select is type and mc then next text box allow typing\n    if (item===\"type\" && e.target.value === \"mc\"){\n      //nextsibling is the next tag that is not a child\n      e.target.nextSibling.disabled = false\n      e.target.nextSibling.placeholder=\"Seperate MC options with ;\"\n    } else if (item===\"type\" && e.target.value === \"likert\"){\n      e.target.nextSibling.disabled = false\n    } else if (item===\"type\") {\n      e.target.nextSibling.disabled = true\n      e.target.nextSibling.placeholder=\"\"\n      setQuestionList(newArray)\n    }\n\n  }\n\n  function reloadId(){\n    //reload token\n    let result = makeid(8)\n    document.getElementById('token').value = result;\n    existingTokenList.forEach(tokenObj => {\n      if (tokenObj.token === result){\n        reloadId()\n        //if in very rare chance generate same token then reload again\n      } else {\n        document.getElementById('token').value = result;\n      }\n    })\n  }\n\n  const getCurrentTokens = async () => {\n    //get the list of current tokens and names\n    try {\n        const response = await fetch('/api/v1/get-all-token/')\n        //console.log(response)\n        //must need this line to get the result of JSON, not some silly stuff\n        const JSONData = await response.json();\n        //console.log(JSONData)\n        //add those tokens to dropdown menu\n        setExistingTokenList(JSONData.data)\n        JSONData.data.forEach((tokenRow, index) => {\n          let option = document.createElement('option')\n          option.value = tokenRow.token\n          option.innerHTML = tokenRow.token + \" - \" + tokenRow.questionnaire_name\n          document.getElementById('selectMode').add(option)\n      })\n    } catch (err) {\n        console.error(err)\n    }\n\n  }\n\n  const getCurrentQuestions = async (e) => {\n    //get the current questions for that given token\n    try {\n      const response = await fetch('/api/v1/questionnaire-live/' + e.target.value) //get token questions\n      //console.log(response)\n      //must need this line to get the result of JSON, not some silly stuff\n      const JSONData = await response.json();\n      //console.log(JSONData)\n      let questionData = JSONData.data.content_json\n      //console.log(questionData)\n      document.getElementById('name').value = JSONData.data.questionnaire_name\n      document.getElementById('token').value = JSONData.data.token\n      let finalQuestionData = questionData\n      //directly read from prestgreSQL for JSON\n      console.log(finalQuestionData)\n      console.log(typeof finalQuestionData)\n      setQuestionList(finalQuestionData)\n\n      //turn on the textbox if value is mc or likert\n      //this part of the code does not work yet\n      let allTypeChoice = document.querySelectorAll('#typeBox')\n      allTypeChoice.forEach(choice => {\n        if (choice.value === \"likert\" || choice.value === \"mc\"){\n          choice.nextSibling.disabled = false\n        }\n      })\n    } catch (err) {\n      console.error(err)\n    }\n\n  }\n\n  const enableDisableReloadTokenButton = () => {\n    //STILL WORKING, does not work now\n    if (document.getElementById('selectMode').value = \"create\") {\n      //disable the token reload button to avoid \n      //alert(\"is create\")\n      document.getElementById(\"reloadToken\").disabled = false\n    } else {\n      //alert(\"not create\")\n      document.getElementById(\"reloadToken\").disabled = true\n    }\n  }\n\n  useEffect(() => {\n    reloadId(); //this load part becomes cannot work, dont know why yet\n    getCurrentTokens();\n  }, [])\n\n  return (\n    <div className=\"container\" style={{\"margin\": \"25px\"}}>\n      <h1>Build a questionnaire</h1>\n      <div>Select questionnaire to edit:</div>\n      <select class=\"token-dropdown\" id=\"selectMode\" style={{\"width\": \"300px\"}} onChange={(e) => getCurrentQuestions(e)} onSelect={() => enableDisableReloadTokenButton()}>\n        <option value=\"create\">Create new questionnaire</option>\n      </select>\n      <br />\n      <br />\n      <div>Questionnaire Name:</div>\n      <input type=\"text\" id=\"name\" name=\"name\" />\n      <div>Generate random token:</div>\n      <input type=\"text\" id=\"token\" name=\"token\" disabled/> <button id=\"reloadToken\" onClick={() => reloadId()}>Reload</button>\n      <br />\n      <div style={{\"margin\": \"15px\", \"border\":\"1px solid\"}}>\n        <div style={{\"margin\": \"15px\"}}>\n        {questionList.map((data, idx) =>\n          <div key={idx} style={{\"margin\": \"15px\"}}>\n            <input type=\"text\" name=\"question\" value={data[\"question\"]} onChange={(e) => changeItem(e, idx, \"question\")}/>\n            <select name=\"type\" className=\"typeBox\" value={data[\"type\"]} onChange={(e) => changeItem(e, idx, \"type\")}>\n              <option value=\"textbox\">Textbox</option>\n              <option value=\"mc\">Multiple Choice</option>\n              <option value=\"likert\">Likert</option>\n            </select>\n            <input list={\"dropdown-in-detail-\"+idx} type=\"text\" name=\"options\" value={data[\"options\"]} onChange={(e) => changeItem(e, idx, \"options\")} disabled />\n            <datalist id={\"dropdown-in-detail-\"+idx}>  \n              <option value=\"1-10\" >likert 1-10</option>\n              <option value=\"agree-disagree-5\" >agree-disagree-5</option>\n            </datalist>\n            <button onClick={(e)=>addRow(e, idx)}>+</button>\n          </div>\n        )\n\n        /* end of map */}\n\n        <button onClick={()=>addLastRow()}>+</button>\n      </div>\n      <br />\n      <br />\n\n      </div>\n      <button onClick={()=>submit()}>Submit</button>\n      {JSON.stringify(questionList)}\n\n    </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}